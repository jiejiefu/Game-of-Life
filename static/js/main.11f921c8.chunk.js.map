{"version":3,"sources":["Imageupload.js","App.js","reportWebVitals.js","index.js"],"names":["Imageupload","props","state","pictures","onDrop","bind","pictureFiles","pictureDataURLs","this","setState","concat","console","log","JSON","stringify","withIcon","buttonText","onChange","imgExtension","maxFileSize","withPreview","React","Component","numRows","numCols","operations","directions","generateEmptyGrid","rows","i","push","Array","from","generateRandomGrid","Math","random","getScreenshot","html2canvas","document","querySelector","then","canvas","getElementsByTagName","style","backgroundColor","width","height","margin","getElementById","appendChild","App","useState","grid","setGrid","running","setRunning","redEating","setEatting","runningRef","useRef","current","eatingRef","runningButton","createRef","runSimulation","useCallback","g","produce","gridCopy","k","neighbors","forEach","x","y","newI","newK","countMove","paleRedDot","floor","dx","dy","err","error","setTimeout","ref","fontSize","onClick","variant","click","id","display","gridTemplateColumns","map","col","newGrid","undefined","border","maxWidth","padding","background","textAlign","color","flexWrap","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.11f921c8.chunk.js","sourcesContent":["import React from \"react\";\r\nimport ImageUploader from \"react-images-upload\";\r\n// https://github.com/JakeHartnell/react-images-upload\r\nclass Imageupload extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { pictures: [] };\r\n    this.onDrop = this.onDrop.bind(this);\r\n  }\r\n\r\n  onDrop(pictureFiles, pictureDataURLs) {\r\n    this.setState({\r\n      pictures: this.state.pictures.concat(pictureFiles)\r\n    });\r\n    console.log(\"Files Array: \" + this.state.pictures);\r\n    console.log(pictureDataURLs);\r\n    console.log(JSON.stringify(this.state.pictures, null, 2));\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <ImageUploader\r\n        withIcon={true}\r\n        buttonText=\"Choose images\"\r\n        onChange={this.onDrop}\r\n        imgExtension={[\".jpg\", \".gif\", \".png\", \".gif\"]}\r\n        maxFileSize={5242880}\r\n        withPreview={true}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Imageupload;","import React, { useState, useCallback, useRef } from \"react\";\nimport produce from \"immer\";\nimport Imageupload from \"./Imageupload\";\nimport html2canvas from \"html2canvas\";\n// import 'bootstrap/dist/css/bootstrap.min.css';\n// import { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\n\nconst numRows = 28;\nconst numCols = 63;\n\nconst operations = [\n  [0, 1],\n  [0, -1],\n  [1, -1],\n  [-1, 1],\n  [1, 1],\n  [-1, -1],\n  [1, 0],\n  [-1, 0]\n];\n\nconst directions = [[1, 0], [0, 1], [-1, 0], [0, -1]];\n\nconst generateEmptyGrid = () => {\n  const rows = [];\n  for (let i = 0; i < numRows; i++) {\n    rows.push(Array.from(Array(numCols), () => 0));\n  }\n  return rows;\n};\n\nconst generateRandomGrid = () => {\n  const rows = [];\n  for (let i = 0; i < numRows; i++) {\n    rows.push(\n      Array.from(Array(numCols), () => (Math.random() > 0.7 ? 1 : 0))\n    );\n  }\n  return rows;\n}\n\nconst randomStart = () => {\n  let x = Math.floor(Math.random()*numRows);\n  let y = Math.floor(Math.random()*numCols);\n  return [x, y];\n}\n\nconst getScreenshot = () => {\n  html2canvas(document.querySelector(\"#grid\")).then(canvas => {\n    document.getElementsByTagName(\"button\")[4].style.backgroundColor = \"fff5ee\";\n    canvas.style.width = \"512px\"; // 1600/3 = 533.3, 700/3 = 233.3\n    canvas.style.height = \"224px\"; // (16:7) * 32 = (512:224)\n    canvas.style.margin = \"3px\";\n    document.getElementById(\"flexbox-container\").appendChild(canvas);\n  });\n}\n\nconst App: React.FC = () => {\n  const [grid, setGrid] = useState(() => {\n    return generateEmptyGrid();\n  });\n\n  const [running, setRunning] = useState(false);\n  const [redEating, setEatting] = useState(false);\n  // const [redStart, setRedStart] = useState([0,0]);\n  const runningRef = useRef(running);\n  runningRef.current = running;\n  const eatingRef = useRef(redEating);\n  eatingRef.current = redEating;\n  const runningButton = React.createRef();\n  \n  const runSimulation = useCallback(() => {\n    if (!runningRef.current) {\n      return;\n    }\n    \n    setGrid(g => {\n      return produce(g, gridCopy => {\n        for (let i = 0; i < numRows; i++) {\n          for (let k = 0; k < numCols; k++) {\n            let neighbors = 0;\n            operations.forEach(([x, y]) => {\n              const newI = i + x;\n              const newK = k + y;\n              if (newI >= 0 && newI < numRows && newK >= 0 && newK < numCols) {\n                neighbors += g[newI][newK];\n              }\n            });\n            // if (gridCopy[i][k] === 2) continue;\n            if (neighbors < 2 || neighbors > 3) {\n              gridCopy[i][k] = 0;\n            } else if (g[i][k] === 0 && neighbors === 3) {\n              gridCopy[i][k] = 1;\n            }\n          }\n        }\n\n        let countMove = 0;\n        let paleRedDot = randomStart();\n        if (eatingRef.current) {\n          let x = paleRedDot[0];\n          let y = paleRedDot[1];\n          directions.forEach(([dx, dy]) => {\n            x += dx;\n            y += dy;\n            // console.log(x, y, gridCopy[x][y]); //Cannot read property '12' of undefined\n            try {\n              while (x >= 0 && x < numCols && y >= 0 && y < numRows && g[x][y] !== 1) {\n                gridCopy[x][y] = 2;\n                paleRedDot = [x, y];\n                x += dx;\n                y += dy;\n              }\n            } catch (err) {\n              console.error(err);\n            } finally {\n              console.log(countMove++, paleRedDot);\n            }\n          })\n        }\n      })\n    });\n\n    setTimeout(runSimulation, 100);\n  }, []);\n\n  return (\n    <>\n      <button\n        ref={runningButton}\n        style={{ fontSize: \"20px\" }}\n        onClick={() => {\n          setRunning(!running);\n          if (!running) {\n            runningRef.current = true;\n            runSimulation();\n          } else if (running) {\n            runningRef.current = false;\n            getScreenshot();\n          }\n        }}\n      >\n        {running ? \"stop\" : \"start\"}\n      </button>\n      <button\n        style={{ fontSize: \"20px\" }}\n        onClick={() => {\n          setGrid(generateRandomGrid());\n        }}\n      >\n        random\n      </button>\n      <button\n        style={{ fontSize: \"20px\" }}\n        onClick={() => {\n          setGrid(generateEmptyGrid());\n        }}\n      >\n        clear\n      </button>\n      <button variant=\"outline-danger\"\n        style={{ fontSize: \"20px\" }}\n        onClick={() => {\n          // setGrid({...grid, grid[0][0] = 2});\n          setEatting(true);\n          eatingRef.current = true;\n        }}\n      >\n        {redEating ? \"eatting\" : \"eat\"}\n      </button>\n      <button\n        style={{ fontSize: \"20px\" }}\n        onClick={() => {\n          getScreenshot();\n        }}\n      >\n        screenshot\n      </button> {\" \"}\n      <button\n        style={{ fontSize: \"20px\" }}\n        onClick={() => {\n          setGrid(generateEmptyGrid());\n          setGrid(generateRandomGrid());\n          runningButton.current.click(); // runSimulation();\n          for (let i = 0; i < 5; i++) {\n            setTimeout(function () {\n              getScreenshot();\n            }, i * 2500);\n          }\n        }}\n      >\n        Click me!📷📸📷\n      </button>\n      <div id=\"grid\"\n        style={{\n          display: \"grid\",\n          gridTemplateColumns: `repeat(${numCols}, 20px)`\n        }}\n      >\n        {grid.map((rows, i) =>\n          rows.map((col, k) => (\n            <div\n              key={`${i}-${k}`}\n              onClick={() => {\n                const newGrid = produce(grid, gridCopy => {\n                  gridCopy[i][k] = grid[i][k] ? 0 : 1;\n                });\n                setGrid(newGrid);\n              }}\n              style={{\n                width: 20,\n                height: 20,\n                backgroundColor: grid[i][k] ? (grid[i][k] >= 2 ? \"red\":\"black\") : undefined,\n                border: \"solid 1px black\"\n              }}\n            ></div> //{`${i*numCols+k}`}\n          ))\n        )}\n      </div>\n      {/* <Router>\n        <Switch>\n          <Route exact path=\"/\" children={<Node />} />\n          <Route path=\"/todo/:id\" children={<Node />} />\n        </Switch>\n      </Router> */}\n      <Imageupload style={{ maxWidth: \"500px\", margin: \"20px auto\" }}\n                    withPreview={true}/>\n      <div id=\"capture\" style={{ padding: 10, background: \"black\" }}>\n        <h4 style={{ textAlign: \"center\", color: \"white\" }}>Screenshots</h4>\n        <div id=\"flexbox-container\" style={{ display: \"flex\", flexWrap: \"wrap\" }}>\n\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}